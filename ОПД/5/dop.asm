ORG 0x0000
ORG 0x0040
START:
JUMP $INPUT_INIT
START_FIND:CLA
CURRENT_SIMPLE_ID: WORD 0x0000
SUS_SIMPLE: WORD 0x0000
NEEDED: WORD 0x003C
CLA
LD #2
ST (CURRENT_SIMPLE_ID)+
INC
ST $SUS_SIMPLE
FINDING_SIMPLE: LD $CURRENT_SIMPLE_ID
    CMP $NEEDED
    BEQ START_DEREF
    LD $SUS_SIMPLE
    PUSH
    LD $CURRENT_SIMPLE_ID
    PUSH
    CALL $IS_SIMPLE
    SWAP
    POP
    SWAP
    POP
    BPL NEXT_SUS
    LD $SUS_SIMPLE
    ST (CURRENT_SIMPLE_ID)+
    NEXT_SUS: LD $SUS_SIMPLE
    ADD #2
    ST $SUS_SIMPLE
    JUMP $FINDING_SIMPLE

GET_CURRENT_SIMPLE:
    INSIDE_DEREF: WORD 0x0000
    LD &1
    ST $INSIDE_DEREF
    LD (INSIDE_DEREF)
    RET

INPUT_INIT:
    NUM: WORD 0x0000
    NEWNUM: WORD 0x0000
    INPUT_NUM: IN 0x1D
    AND #0x40
    BEQ INPUT_NUM
    IN 0x1C
    ST $NEWNUM
    PUSH
    CALL CHECK_NUMERIC
    SWAP
    POP
    BMI ERR
    BEQ START_FIND
    LD $NUM
    PUSH
    LD $NEWNUM
    PUSH
    CALL $NEW_DEC_NUM
    SWAP
    POP
    POP
    ST $NUM
    BMI ERR
    JUMP $INPUT_NUM

CHECK_NUMERIC:
    CMP #0xF
    BEQ START_OUT
    CMP #0xA
    BEQ ERR_OUT
    JUMP NUMERIC
    ERR_OUT: LD #-1
    RET
    START_OUT: LD #0
    RET
    NUMERIC: LD #1
    RET

DEREF: WORD ?

IS_SIMPLE: CLA ;STACK: DIVIDED;TEMP;INDEX;RET;CURRENT_SIMPLE;N
    PUSH
    PUSH
    PUSH
    CHECKING_SIMPLE_DEVISORS: LD &2
    CMP &4
    BPL IS_SIMPLE_OUT_P
    LD &2
    ST $DEREF
    LD &5
    OTN: SUB (DEREF)
    ST &1
    LD &0
    INC
    ST &0
    LD &1
    BMI IS_DIVISOR_OUT
    BEQ IS_DIVISOR_OUT
    JUMP $OTN
    IS_DIVISOR_OUT: BEQ IS_SIMPLE_OUT_N
    LD &2
    INC
    ST &2
    LD &1
    JUMP $CHECKING_SIMPLE_DEVISORS
    IS_SIMPLE_OUT_P: SWAP
    POP
    SWAP
    POP
    SWAP
    POP
    LD #-1
    RET
    IS_SIMPLE_OUT_N:
    LD &0
    SWAP
    POP
    SWAP
    POP
    SWAP
    POP
    RET

START_DEREF:
	JUMP $STARTT

ERR: IN 0x15
    AND #0x40
    BEQ ERR
    LD #0
    OUT 0x14
    LD #0x1B
    OUT 0x14
    LD #0x2B
    OUT 0x14
    LD #0x3B
    OUT 0x14
    LD #0x4B
    OUT 0x14
    LD #0x5B
    OUT 0x14
    LD #0x6B
    OUT 0x14
    LD #0x7B
    OUT 0x14
    HLT

NEW_DEC_NUM:CLA
    PUSH;COUNT
    PUSH;TEMP
    LD #9
    ST &1
    LD &4
    ST &0
    ADDING: LD &4
    ADD &0
    ST &4
    LD &1
    DEC
    ST &1
    BEQ EXIT_NEW_DEC_NUM
    JUMP $ADDING
    EXIT_NEW_DEC_NUM: LD &4
    ADD &3
    ST &4
    SWAP
    POP
    SWAP
    POP
    RET
ORG 0x0100
STARTT: CLA
    VIVOD_1: WORD 0x000B
    VIVOD_2: WORD 0x001B
    VIVOD_3: WORD 0x002B
    VIVOD_4: WORD 0x003B
    VIVOD_5: WORD 0x004B
    VIVOD_6: WORD 0x005B
    VIVOD_7: WORD 0x006B

    LD $NUM
    CHECK_2_AS_DIVISOR: AND #1
    BEQ TWO_IS_DIVISOR
    JUMP $END_CHECK_2_AS_DIVISOR
    TWO_IS_DIVISOR: LD #2
    PUSH
    CALL $NEW_NUM_TO_PRINT
    SWAP
    POP
    CALL $PRINT
    LD #0xB
    PUSH
    CALL $NEW_NUM_TO_PRINT
    SWAP
    POP
    CALL $PRINT
    LD $NUM
    ASR
    ST $NUM
    JUMP $CHECK_2_AS_DIVISOR
    END_CHECK_2_AS_DIVISOR:
    LD $NUM
    CMP #1
    BEQ HHLT_DEREF
    NUM_ON_VIVOD: WORD 0x0000
    NUMERIC_ON_VIVOD: WORD 0x0000
    LD #1
    ST $CURRENT_SIMPLE_ID
    NEXT_SIMPLE: LD $CURRENT_SIMPLE_ID
    PUSH
    CALL $GET_CURRENT_SIMPLE
    SWAP
    POP
    CUR_SIM_DIVIDED: PUSH
    LD $NUM
    PUSH
    CALL $CHECK_IF_DIVIDED
    BMI CLEAR_AND_NEXT_SIMPLE
    ST $NUM
    POP
    POP
    ST $NUM_ON_VIVOD
    NEXT_NUMERIC: PUSH
    CALL $GET_LAST_NUM
    ST $NUMERIC_ON_VIVOD
    POP
    ST $NUM_ON_VIVOD
    LD $NUMERIC_ON_VIVOD
    PUSH
    CALL $SET_T
    SWAP
    POP
    LD $NUM_ON_VIVOD
    BNE PRINT_NUMERIC_AND_GET_NEXT
    BEQ PRINT_NUMERIC_AND_GO
    PRINT_NUMERIC_AND_GET_NEXT:
    LD $NUM_ON_VIVOD
    JUMP $NEXT_NUMERIC
    PRINT_NUMERIC_AND_GO: 
    T_GETTING: CALL $GET_T
    PUSH
    CALL $NEW_NUM_TO_PRINT
    SWAP
    POP
    LD $CURRENT_T
    BEQ LAST_NUM
    JUMP $T_GETTING
    LAST_NUM:
    LD #0xB
    PUSH
    CALL $NEW_NUM_TO_PRINT
    SWAP
    POP
    CALL $PRINT
    LD $NUM
    CMP #1
    BEQ HHLT_DEREF
    LD $CURRENT_SIMPLE_ID
    PUSH
    CALL $GET_CURRENT_SIMPLE
    SWAP
    POP
    JUMP $CUR_SIM_DIVIDED
    CLEAR_AND_NEXT_SIMPLE: SWAP
    POP
    SWAP
    POP
    LD $CURRENT_SIMPLE_ID
    INC
    ST $CURRENT_SIMPLE_ID
    CMP $NEEDED
    BEQ PRINT_WHAT_OTHER_AND_HLT
    JUMP $NEXT_SIMPLE
    PRINT_WHAT_OTHER_AND_HLT:
    LD $NUM
    BEQ HHLT_DEREF
    PRINTING_LAST: 
    PUSH
    CALL $GET_LAST_NUM
    ST $NUMERIC_ON_VIVOD
    POP
    ST $NUM_ON_VIVOD
    LD $NUMERIC_ON_VIVOD
    PUSH
    CALL $SET_T
    SWAP
    POP
    LD $NUM_ON_VIVOD
    BEQ PRINT_LAST
    JUMP $PRINTING_LAST

PRINT_LAST:
    NOP
    T_GETTING_NEW: CALL $GET_T
    PUSH
    CALL $NEW_NUM_TO_PRINT
    SWAP
    POP
    LD $CURRENT_T
    BEQ HHLT_PRINT
    JUMP $T_GETTING_NEW
    HHLT_PRINT: CALL $PRINT
    JUMP $HHLT_DEREF

HHLT_DEREF: JUMP $HHLT

NEW_NUM_TO_PRINT: LD $VIVOD_6
    ADD #0x10
    ST $VIVOD_7
    LD $VIVOD_5
    ADD #0x10
    ST $VIVOD_6
    LD $VIVOD_4
    ADD #0x10
    ST $VIVOD_5
    LD $VIVOD_3
    ADD #0x10
    ST $VIVOD_4
    LD $VIVOD_2
    ADD #0x10
    ST $VIVOD_3
    LD $VIVOD_1
    ADD #0x10
    ST $VIVOD_2
    LD &1
    ST $VIVOD_1
    RET

GET_LAST_NUM:
    CLA
    PUSH
    PUSH
    LD &3
    ST &0
    CYCLE_GET_LAST_NUM:
    SUB #10
    BMI RETURN_GET_LAST_NUM
    ST &0
    LD &1
    INC
    ST &1
    LD &0
    JUMP $CYCLE_GET_LAST_NUM
    RETURN_GET_LAST_NUM: LD &1
    ST &3
    LD &0
    SWAP
    POP
    SWAP
    POP
    RET

PRINT:
    NOP
    OSTANOV:IN 0x1D
    AND #0x40
    BEQ OSTANOV
    LD $VIVOD_1
    OUT 0x14
    LD $VIVOD_2
    OUT 0x14
    LD $VIVOD_3
    OUT 0x14
    LD $VIVOD_4
    OUT 0x14
    LD $VIVOD_5
    OUT 0x14
    LD $VIVOD_6
    OUT 0x14
    LD $VIVOD_7
    OUT 0x14
    RET
HHLT: HLT
CHECK_IF_DIVIDED: CLA
    PUSH
    LD &2
    CYCLE_CHECK_IF_DIVIDED:
    SUB &3
    BMI CHECK_IF_DIVIDED_BAD
    ST &2
    LD &0
    INC
    ST &0
    LD &2
    BEQ CHECK_IF_DIVIDED_GOOD
    JUMP $CYCLE_CHECK_IF_DIVIDED
    CHECK_IF_DIVIDED_BAD: LD #-1
    SWAP
    POP
    RET
    CHECK_IF_DIVIDED_GOOD: LD &0
    SWAP
    POP
    RET

ORG 0x01FF
T0: WORD 0xB
T1: WORD ?
T2: WORD ?
T3: WORD ?
T4: WORD ?
T5: WORD ?


SET_T:
    LD START_T
    ADD $CURRENT_T
    ST $DEREFT
    LD $CURRENT_T
    INC
    ST $CURRENT_T
    LD &1
    ST (DEREFT)
    RET

GET_T:
    LD START_T
    ADD $CURRENT_T
    DEC
    ST $DEREFT
    LD $CURRENT_T
    DEC
    ST $CURRENT_T
    LD (DEREFT)
    RET

DEREFT: WORD ?
CURRENT_T: WORD ?
START_T: WORD 0x0200